<Type Name="IFieldState&lt;T&gt;" FullName="Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IFieldState&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFieldState`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFieldState(Of T)" />
  <TypeSignature Language="F#" Value="type IFieldState&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
    <AssemblyVersion>3.12.2.4</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">The form state that is read or written to.</typeparam>
    <summary>
            Interface that defines basic access to a field.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dependencies As IEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="member this.Dependencies : seq&lt;string&gt;" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState&lt;'T&gt;.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the other fields this one depends on.
            </summary>
        <value>List of field names this one depends on.</value>
        <remarks>This is mainly useful for <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Confirmation`1" /> fields.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (T state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(!T state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.GetValue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (state As T) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetValue : 'T -&gt; obj" Usage="iFieldState.GetValue state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="T" />
      </Parameters>
      <Docs>
        <param name="state">Form state to get field value from.</param>
        <summary>
            Get this field value from form state.
            </summary>
        <returns>Current value found in state.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState&lt;'T&gt;.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Test to see if field is nullable. 
            </summary>
        <value>True if field is nullable.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown (T state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnknown(!T state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.IsUnknown(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnknown (state As T) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsUnknown : 'T -&gt; bool" Usage="iFieldState.IsUnknown state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="T" />
      </Parameters>
      <Docs>
        <param name="state">Form state to check.</param>
        <summary>
            Test to see if the field value form state has a value.
            </summary>
        <returns>True if value is unknown.</returns>
        <remarks>
            For value types (numbers, bools, date time) a value is unknown only if the field is nullable and it is null.
            For enum based values (both simple and enumerated) they can also be nullable or the 0 enum value if not nullable.
            For non value types like string the test is to see if the field is actually null.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Limits">
      <MemberSignature Language="C#" Value="public bool Limits (out double min, out double max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Limits([out] float64&amp; min, [out] float64&amp; max) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Limits(System.Double@,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Limits (ByRef min As Double, ByRef max As Double) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Limits :  *  -&gt; bool" Usage="iFieldState.Limits (min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="min" Type="System.Double&amp;" RefType="out" />
        <Parameter Name="max" Type="System.Double&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="min">Minimum possible value.</param>
        <param name="max">Maximum possible value.</param>
        <summary>
            Limits of numeric values.
            </summary>
        <returns>True if limits limit the underlying data type.</returns>
        <remarks>
            This typically reflects the result of setting <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute" /> limits on the possible values.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional">
      <MemberSignature Language="C#" Value="public bool Optional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Optional" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Optional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Optional As Boolean" />
      <MemberSignature Language="F#" Value="member this.Optional : bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState&lt;'T&gt;.Optional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Test to see if field is optional which means that an unknown value is legal.
            </summary>
        <value>True if field is optional.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pattern As String" />
      <MemberSignature Language="F#" Value="member this.Pattern : string" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState&lt;'T&gt;.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Regular expression for validating a string.
            </summary>
        <value>Validation regular expression.</value>
        <remarks> This typically reflects the result of setting <see cref="T:Microsoft.Bot.Builder.FormFlow.PatternAttribute" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUnknown">
      <MemberSignature Language="C#" Value="public void SetUnknown (T state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUnknown(!T state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.SetUnknown(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetUnknown (state As T)" />
      <MemberSignature Language="F#" Value="abstract member SetUnknown : 'T -&gt; unit" Usage="iFieldState.SetUnknown state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="T" />
      </Parameters>
      <Docs>
        <param name="state">Form state with field value to set to unknown.</param>
        <summary>
            Set this field value in form state to unknown.
            </summary>
        <remarks>
            For value types (numbers, bools, date time) the value is set to null if nullable.
            For enum types it is set to null if nullable or 0 if not.  
            For non value types like string set the value to null.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (T state, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(!T state, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.SetValue(`0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (state As T, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetValue : 'T * obj -&gt; unit" Usage="iFieldState.SetValue (state, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="T" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">Form state to set field value in.</param>
        <param name="value">New value.</param>
        <summary>
            Set this field value in form state.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState&lt;'T&gt;.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>   Gets the type of the field. </summary>
        <value> The type. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>