<Type Name="IPrompt&lt;T&gt;" FullName="Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IPrompt&lt;T&gt; where T : class" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPrompt`1&lt;class T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPrompt(Of T)" />
  <TypeSignature Language="F#" Value="type IPrompt&lt;'T (requires 'T : null)&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
    <AssemblyVersion>3.12.2.4</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Form state.</typeparam>
    <summary>
            Interface for a prompt and its associated recognizer.
            </summary>
    <remarks>
            This interface allows taking a \ref patterns expression and making it into a string with the template parts filled in.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Annotation">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute Annotation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute Annotation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1.Annotation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Annotation As TemplateBaseAttribute" />
      <MemberSignature Language="F#" Value="member this.Annotation : Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt&lt;'T (requires 'T : null)&gt;.Annotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Description of the prompt and how to generate it.
            </summary>
        <value>Attribute describing how to generate prompt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt Prompt (T state, Microsoft.Bot.Builder.FormFlow.Advanced.IField&lt;T&gt; field, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt Prompt(!T state, class Microsoft.Bot.Builder.FormFlow.Advanced.IField`1&lt;!T&gt; field, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1.Prompt(`0,Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0},System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (state As T, field As IField(Of T), ParamArray args As Object()) As FormPrompt" />
      <MemberSignature Language="F#" Value="abstract member Prompt : 'T * Microsoft.Bot.Builder.FormFlow.Advanced.IField&lt;'T (requires 'T : null)&gt; * obj[] -&gt; Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt" Usage="iPrompt.Prompt (state, field, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="T" />
        <Parameter Name="field" Type="Microsoft.Bot.Builder.FormFlow.Advanced.IField&lt;T&gt;" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="state">Current form state.</param>
        <param name="field">Current field being processed.</param>
        <param name="args">Optional arguments.</param>
        <summary>
            Return prompt to send to user.
            </summary>
        <returns>Message to user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Recognizer">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize&lt;T&gt; Recognizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1&lt;!T&gt; Recognizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1.Recognizer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Recognizer As IRecognize(Of T)" />
      <MemberSignature Language="F#" Value="member this.Recognizer : Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize&lt;'T (requires 'T : null)&gt;" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt&lt;'T (requires 'T : null)&gt;.Recognizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Associated recognizer if any.
            </summary>
        <value>Recognizer for matching user input.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>