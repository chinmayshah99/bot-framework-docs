<Type Name="IFormBuilder&lt;T&gt;" FullName="Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IFormBuilder&lt;T&gt; where T : class" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormBuilder`1&lt;class T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormBuilder(Of T)" />
  <TypeSignature Language="F#" Value="type IFormBuilder&lt;'T (requires 'T : null)&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
    <AssemblyVersion>3.12.2.4</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Form state.</typeparam>
    <summary>   Interface for building a form. </summary>
    <remarks>   
            A form consists of a series of steps that can be one of:
            <list type="list"><item>A message to the user.</item><item>A prompt sent to the user where the response is to fill in a form state value.</item><item>A confirmation of the current state with the user.</item></list>
            By default the steps are executed in the order of the <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Message(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})" />, <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})" /> and <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})" /> calls.
            If you do not take explicit control, the steps will be executed in the order defined in the 
            form state with a final confirmation.
            This interface allows you to flently build a form by composing together fields,
            messages and confirmation.  The fluent building blocks provide common patterns
            like fields being based on your state class, but you can also build up your
            own definition of a form by using Advanced.IField.  
            If you want to build a form using C# reflection over your state class use FormBuilder.  
            To declaratively build a form through JSON Schema you can use Json.FormBuilderJson.
            
            Forms are sensitive to the current thread UI culture.  The Microsoft.Bot.Builder strings will localize
            to that culture if available.  You can also localize the strings generated for your form by calling IForm.SaveResources
            or by using the RView tool and adding that resource to your project.  For strings in dynamic fields, messages or confirmations you will
            need to use the normal C# mechanisms to localize them.  Look in the overview documentation for more information.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddRemainingFields">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; AddRemainingFields (System.Collections.Generic.IEnumerable&lt;string&gt; exclude = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; AddRemainingFields(class System.Collections.Generic.IEnumerable`1&lt;string&gt; exclude) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.AddRemainingFields(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRemainingFields (Optional exclude As IEnumerable(Of String) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AddRemainingFields : seq&lt;string&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.AddRemainingFields exclude" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exclude" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="exclude">Fields not to include.</param>
        <summary>
            Add all fields not already added to the form.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>
            This will add all fields defined in your form that have not already been
            added if the fields are supported.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IForm&lt;T&gt; Build (System.Reflection.Assembly resourceAssembly = null, string resourceName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IForm`1&lt;!T&gt; Build(class System.Reflection.Assembly resourceAssembly, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Build(System.Reflection.Assembly,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Build (Optional resourceAssembly As Assembly = null, Optional resourceName As String = null) As IForm(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Build : System.Reflection.Assembly * string -&gt; Microsoft.Bot.Builder.FormFlow.IForm&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Build (resourceAssembly, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IForm&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceAssembly" Type="System.Reflection.Assembly" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceAssembly">Assembly for localization resources.</param>
        <param name="resourceName">Name of resources to use for localization.</param>
        <summary>
            Build the form based on the methods called on the builder.
            </summary>
        <returns>The constructed form.</returns>
        <remarks>
            The default assembly is the one that contains <typeparamref name="T" />
            and the default resourceName if the name of that type.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.FormConfiguration Configuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Bot.Builder.FormFlow.FormConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Configuration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Configuration As FormConfiguration" />
      <MemberSignature Language="F#" Value="member this.Configuration : Microsoft.Bot.Builder.FormFlow.FormConfiguration" Usage="Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.FormConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The form configuration supplies default templates and settings.
            </summary>
        <value>The current form configuration.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Confirm (Microsoft.Bot.Builder.FormFlow.MessageDelegate&lt;T&gt; generateMessage, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; condition = null, System.Collections.Generic.IEnumerable&lt;string&gt; dependencies = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Confirm(class Microsoft.Bot.Builder.FormFlow.MessageDelegate`1&lt;!T&gt; generateMessage, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; condition, class System.Collections.Generic.IEnumerable`1&lt;string&gt; dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(Microsoft.Bot.Builder.FormFlow.MessageDelegate{`0},Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (generateMessage As MessageDelegate(Of T), Optional condition As ActiveDelegate(Of T) = null, Optional dependencies As IEnumerable(Of String) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Confirm : Microsoft.Bot.Builder.FormFlow.MessageDelegate&lt;'T (requires 'T : null)&gt; * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * seq&lt;string&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Confirm (generateMessage, condition, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generateMessage" Type="Microsoft.Bot.Builder.FormFlow.MessageDelegate&lt;T&gt;" />
        <Parameter Name="condition" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="dependencies" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="generateMessage">  Delegate for building message. </param>
        <param name="condition">        Whether or not this step is active. </param>
        <param name="dependencies">What fields this confirmation depends on.</param>
        <summary>   Generate a confirmation using a delegate to dynamically build the message. </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Confirm (Microsoft.Bot.Builder.FormFlow.PromptAttribute prompt, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; condition = null, System.Collections.Generic.IEnumerable&lt;string&gt; dependencies = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Confirm(class Microsoft.Bot.Builder.FormFlow.PromptAttribute prompt, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; condition, class System.Collections.Generic.IEnumerable`1&lt;string&gt; dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(Microsoft.Bot.Builder.FormFlow.PromptAttribute,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (prompt As PromptAttribute, Optional condition As ActiveDelegate(Of T) = null, Optional dependencies As IEnumerable(Of String) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Confirm : Microsoft.Bot.Builder.FormFlow.PromptAttribute * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * seq&lt;string&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Confirm (prompt, condition, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="Microsoft.Bot.Builder.FormFlow.PromptAttribute" />
        <Parameter Name="condition" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="dependencies" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="prompt">Prompt to use for confirmation.</param>
        <param name="condition">Delegate to test if confirmation applies to the current form state.</param>
        <param name="dependencies">What fields this confirmation depends on.</param>
        <summary>
            Add a confirmation step.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>
            Dependencies will by default be all active steps defined before this confirmation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Confirm (string prompt = null, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; condition = null, System.Collections.Generic.IEnumerable&lt;string&gt; dependencies = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Confirm(string prompt, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; condition, class System.Collections.Generic.IEnumerable`1&lt;string&gt; dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (Optional prompt As String = null, Optional condition As ActiveDelegate(Of T) = null, Optional dependencies As IEnumerable(Of String) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Confirm : string * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * seq&lt;string&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Confirm (prompt, condition, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.String" />
        <Parameter Name="condition" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="dependencies" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="prompt">Prompt to use for confirmation.</param>
        <param name="condition">Delegate to test if confirmation applies to the current form state.</param>
        <param name="dependencies">What fields this confirmation depends on.</param>
        <summary>
            Add a confirmation step.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>
            If prompt is not supplied the \ref patterns element {*} will be used to confirm.
            Dependencies will by default be all active steps defined before this confirmation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Field (Microsoft.Bot.Builder.FormFlow.Advanced.IField&lt;T&gt; field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Field(class Microsoft.Bot.Builder.FormFlow.Advanced.IField`1&lt;!T&gt; field) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Field (field As IField(Of T)) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Field : Microsoft.Bot.Builder.FormFlow.Advanced.IField&lt;'T (requires 'T : null)&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Field field" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="Microsoft.Bot.Builder.FormFlow.Advanced.IField&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="field">Field definition to use.</param>
        <summary>
            Derfine a field step by supplying your own field definition.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>
            You can provide your own implementation of <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1" /> or you can 
            use the <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1" /> class to provide fluent values, 
            <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.FieldReflector`1" /> to use reflection or Json.FieldJson to use JSON Schema.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Field (string name, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; active = null, Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;T&gt; validate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Field(string name, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; active, class Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1&lt;!T&gt; validate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Field (name As String, Optional active As ActiveDelegate(Of T) = null, Optional validate As ValidateAsyncDelegate(Of T) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Field : string * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;'T (requires 'T : null)&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Field (name, active, validate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="active" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="validate" Type="Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="name">Path in the form state to the value being filled in.</param>
        <param name="active">Delegate to test form state to see if step is active.</param>
        <param name="validate">Delegate to validate the field value.</param>
        <summary>
            Define a step for filling in a particular value in the form state.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Field (string name, Microsoft.Bot.Builder.FormFlow.PromptAttribute prompt, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; active = null, Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;T&gt; validate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Field(string name, class Microsoft.Bot.Builder.FormFlow.PromptAttribute prompt, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; active, class Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1&lt;!T&gt; validate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(System.String,Microsoft.Bot.Builder.FormFlow.PromptAttribute,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Field (name As String, prompt As PromptAttribute, Optional active As ActiveDelegate(Of T) = null, Optional validate As ValidateAsyncDelegate(Of T) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Field : string * Microsoft.Bot.Builder.FormFlow.PromptAttribute * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;'T (requires 'T : null)&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Field (name, prompt, active, validate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="prompt" Type="Microsoft.Bot.Builder.FormFlow.PromptAttribute" />
        <Parameter Name="active" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="validate" Type="Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="name">Path in the form state to the value being filled in.</param>
        <param name="prompt">Prompt pattern with more formatting control to describe prompt for field.</param>
        <param name="active">Delegate to test form state to see if step is active.n</param>
        <param name="validate">Delegate to validate the field value.</param>
        <summary>
            Define a step for filling in a particular value in the form state.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Field (string name, string prompt, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; active = null, Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;T&gt; validate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Field(string name, string prompt, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; active, class Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1&lt;!T&gt; validate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(System.String,System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Field (name As String, prompt As String, Optional active As ActiveDelegate(Of T) = null, Optional validate As ValidateAsyncDelegate(Of T) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Field : string * string * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;'T (requires 'T : null)&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Field (name, prompt, active, validate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="prompt" Type="System.String" />
        <Parameter Name="active" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="validate" Type="Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="name">Path in the form state to the value being filled in.</param>
        <param name="prompt">Simple \ref patterns to describe prompt for field.</param>
        <param name="active">Delegate to test form state to see if step is active.n</param>
        <param name="validate">Delegate to validate the field value.</param>
        <summary>
            Define a step for filling in a particular value in the form state.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public bool HasField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.HasField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasField (name As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member HasField : string -&gt; bool" Usage="iFormBuilder.HasField name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"></param>
        <summary>
            Test to see if there is already a field with <paramref name="name" />.
            </summary>
        <returns>True if field is already present.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Message (Microsoft.Bot.Builder.FormFlow.MessageDelegate&lt;T&gt; generateMessage, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; condition = null, System.Collections.Generic.IEnumerable&lt;string&gt; dependencies = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Message(class Microsoft.Bot.Builder.FormFlow.MessageDelegate`1&lt;!T&gt; generateMessage, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; condition, class System.Collections.Generic.IEnumerable`1&lt;string&gt; dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Message(Microsoft.Bot.Builder.FormFlow.MessageDelegate{`0},Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function Message (generateMessage As MessageDelegate(Of T), Optional condition As ActiveDelegate(Of T) = null, Optional dependencies As IEnumerable(Of String) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Message : Microsoft.Bot.Builder.FormFlow.MessageDelegate&lt;'T (requires 'T : null)&gt; * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * seq&lt;string&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Message (generateMessage, condition, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generateMessage" Type="Microsoft.Bot.Builder.FormFlow.MessageDelegate&lt;T&gt;" />
        <Parameter Name="condition" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="dependencies" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="generateMessage">  Delegate for building message. </param>
        <param name="condition">        Whether or not this step is active. </param>
        <param name="dependencies">Fields message depends on.</param>
        <summary>   Generate a message using a delegate to dynamically build the message. </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Message (Microsoft.Bot.Builder.FormFlow.PromptAttribute prompt, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; condition = null, System.Collections.Generic.IEnumerable&lt;string&gt; dependencies = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Message(class Microsoft.Bot.Builder.FormFlow.PromptAttribute prompt, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; condition, class System.Collections.Generic.IEnumerable`1&lt;string&gt; dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Message(Microsoft.Bot.Builder.FormFlow.PromptAttribute,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function Message (prompt As PromptAttribute, Optional condition As ActiveDelegate(Of T) = null, Optional dependencies As IEnumerable(Of String) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Message : Microsoft.Bot.Builder.FormFlow.PromptAttribute * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * seq&lt;string&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Message (prompt, condition, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="Microsoft.Bot.Builder.FormFlow.PromptAttribute" />
        <Parameter Name="condition" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="dependencies" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="prompt">Message to fill in and send.</param>
        <param name="condition">Whether or not this step is active.</param>
        <param name="dependencies">Fields message depends on.</param>
        <summary>
            Show a message with more format control that does not require a response.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Message (string message, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt; condition = null, System.Collections.Generic.IEnumerable&lt;string&gt; dependencies = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Message(string message, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;!T&gt; condition, class System.Collections.Generic.IEnumerable`1&lt;string&gt; dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Message(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function Message (message As String, Optional condition As ActiveDelegate(Of T) = null, Optional dependencies As IEnumerable(Of String) = null) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Message : string * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;'T (requires 'T : null)&gt; * seq&lt;string&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Message (message, condition, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="condition" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;T&gt;" />
        <Parameter Name="dependencies" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="message">A \ref patterns string to fill in and send.</param>
        <param name="condition">Whether or not this step is active.</param>
        <param name="dependencies">Fields message depends on.</param>
        <summary>
            Show a message that does not require a response.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCompletion">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; OnCompletion (Microsoft.Bot.Builder.FormFlow.OnCompletionAsyncDelegate&lt;T&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; OnCompletion(class Microsoft.Bot.Builder.FormFlow.OnCompletionAsyncDelegate`1&lt;!T&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.OnCompletion(Microsoft.Bot.Builder.FormFlow.OnCompletionAsyncDelegate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function OnCompletion (callback As OnCompletionAsyncDelegate(Of T)) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member OnCompletion : Microsoft.Bot.Builder.FormFlow.OnCompletionAsyncDelegate&lt;'T (requires 'T : null)&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.OnCompletion callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Microsoft.Bot.Builder.FormFlow.OnCompletionAsyncDelegate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="callback">Delegate to call on completion.</param>
        <summary>
            Delegate to call when form is completed.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>
            This should only be used for side effects such as calling your service with
            the form state results.  In any case the completed form state will be passed
            to the parent dialog.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prompter">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt; Prompter (Microsoft.Bot.Builder.FormFlow.Advanced.PromptAsyncDelegate&lt;T&gt; prompter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;!T&gt; Prompter(class Microsoft.Bot.Builder.FormFlow.Advanced.PromptAsyncDelegate`1&lt;!T&gt; prompter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Prompter(Microsoft.Bot.Builder.FormFlow.Advanced.PromptAsyncDelegate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompter (prompter As PromptAsyncDelegate(Of T)) As IFormBuilder(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Prompter : Microsoft.Bot.Builder.FormFlow.Advanced.PromptAsyncDelegate&lt;'T (requires 'T : null)&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;'T (requires 'T : null)&gt;" Usage="iFormBuilder.Prompter prompter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompter" Type="Microsoft.Bot.Builder.FormFlow.Advanced.PromptAsyncDelegate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="prompter">Delegate.</param>
        <summary>
            Delegate to send prompt to user.
            </summary>
        <returns>Modified IFormBuilder.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>