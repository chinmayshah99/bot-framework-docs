<Type Name="Extensions" FullName="Microsoft.Bot.Builder.Dialogs.Extensions">
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.Dialogs.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
    <AssemblyVersion>3.12.2.4</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Helper methods.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddHeroCard&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void AddHeroCard&lt;T&gt; (this Microsoft.Bot.Connector.IMessageActivity message, string text, System.Collections.Generic.IEnumerable&lt;T&gt; options, System.Collections.Generic.IEnumerable&lt;string&gt; descriptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHeroCard&lt;T&gt;(class Microsoft.Bot.Connector.IMessageActivity message, string text, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; options, class System.Collections.Generic.IEnumerable`1&lt;string&gt; descriptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.AddHeroCard``1(Microsoft.Bot.Connector.IMessageActivity,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddHeroCard(Of T) (message As IMessageActivity, text As String, options As IEnumerable(Of T), Optional descriptions As IEnumerable(Of String) = null)" />
      <MemberSignature Language="F#" Value="static member AddHeroCard : Microsoft.Bot.Connector.IMessageActivity * string * seq&lt;'T&gt; * seq&lt;string&gt; -&gt; unit" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.AddHeroCard (message, text, options, descriptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" RefType="this" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="descriptions" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"> Type of the options.</typeparam>
        <param name="message"> The message that the buttons will be added to.</param>
        <param name="text"> The text in the <see cref="T:Microsoft.Bot.Connector.HeroCard" />.</param>
        <param name="options"> The options that cause generation of buttons.</param>
        <param name="descriptions">Descriptions for each option.</param>
        <summary>
            Generates buttons from options and add them to the message.
            </summary>
        <remarks>
          <typeparamref name="T" /> should implement ToString().
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeyboardCard&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void AddKeyboardCard&lt;T&gt; (this Microsoft.Bot.Connector.IMessageActivity message, string text, System.Collections.Generic.IEnumerable&lt;T&gt; options, System.Collections.Generic.IEnumerable&lt;string&gt; descriptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyboardCard&lt;T&gt;(class Microsoft.Bot.Connector.IMessageActivity message, string text, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; options, class System.Collections.Generic.IEnumerable`1&lt;string&gt; descriptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.AddKeyboardCard``1(Microsoft.Bot.Connector.IMessageActivity,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddKeyboardCard(Of T) (message As IMessageActivity, text As String, options As IEnumerable(Of T), Optional descriptions As IEnumerable(Of String) = null)" />
      <MemberSignature Language="F#" Value="static member AddKeyboardCard : Microsoft.Bot.Connector.IMessageActivity * string * seq&lt;'T&gt; * seq&lt;string&gt; -&gt; unit" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.AddKeyboardCard (message, text, options, descriptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" RefType="this" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="descriptions" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"> Type of the options.</typeparam>
        <param name="message"> The message that the buttons will be added to.</param>
        <param name="text"> The text in the <see cref="T:Microsoft.Bot.Connector.HeroCard" />.</param>
        <param name="options"> The options that cause generation of buttons.</param>
        <param name="descriptions">Descriptions for each option.</param>
        <summary>
            Generates buttons from options and add them to the message.
            </summary>
        <remarks>
          <typeparamref name="T" /> should implement ToString().
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndConversation">
      <MemberSignature Language="C#" Value="public static void EndConversation (this Microsoft.Bot.Builder.Dialogs.IDialogContext context, string code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndConversation(class Microsoft.Bot.Builder.Dialogs.IDialogContext context, string code) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.EndConversation(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub EndConversation (context As IDialogContext, code As String)" />
      <MemberSignature Language="F#" Value="static member EndConversation : Microsoft.Bot.Builder.Dialogs.IDialogContext * string -&gt; unit" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.EndConversation (context, code)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Bot.Builder.Dialogs.IDialogContext" RefType="this" />
        <Parameter Name="code" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="code">To be added.</param>
        <summary>
            Initiate an <see cref="T:Microsoft.Bot.Builder.Dialogs.EndConversationEvent" /> to reset the conversation's state and stack and send an
            <see cref="F:Microsoft.Bot.Connector.ActivityTypes.EndOfConversation" /> to the Connector.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Forward&lt;R&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Forward&lt;R&gt; (this Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack, Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt; child, Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;R&gt; resume, Microsoft.Bot.Connector.IMessageActivity message, System.Threading.CancellationToken token = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Forward&lt;R&gt;(class Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack, class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!R&gt; child, class Microsoft.Bot.Builder.Dialogs.ResumeAfter`1&lt;!!R&gt; resume, class Microsoft.Bot.Connector.IMessageActivity message, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.Forward``1(Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack,Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0},Microsoft.Bot.Connector.IMessageActivity,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Forward(Of R) (stack As IDialogStack, child As IDialog(Of R), resume As ResumeAfter(Of R), message As IMessageActivity, Optional token As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="static member Forward : Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack * Microsoft.Bot.Builder.Dialogs.IDialog&lt;'R&gt; * Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;'R&gt; * Microsoft.Bot.Connector.IMessageActivity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.Forward (stack, child, resume, message, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Bot.Builder.Dialogs.Extensions/&lt;Forward&gt;d__13`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="R" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="stack" Type="Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack" RefType="this" />
        <Parameter Name="child" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt;" />
        <Parameter Name="resume" Type="Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;R&gt;" />
        <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="R">The type of result expected from the child dialog.</typeparam>
        <param name="stack">The dialog stack.</param>
        <param name="child">The child dialog.</param>
        <param name="resume">The method to resume when the child dialog has completed.</param>
        <param name="message">The message that will be posted to child dialog.</param>
        <param name="token">A cancellation token.</param>
        <summary>
            Call a child dialog, add it to the top of the stack and post the message to the child dialog.
            </summary>
        <returns>A task representing the Forward operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Get&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Get&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.Get``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Get(Of T) (bag As IBotDataBag, key As String) As T" />
      <MemberSignature Language="F#" Value="static member Get : Microsoft.Bot.Builder.Dialogs.IBotDataBag * string -&gt; 'T" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.Get (bag, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GetValue&lt;T&gt; instead", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="bag" Type="Microsoft.Bot.Builder.Dialogs.IBotDataBag" RefType="this" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="bag">To be added.</param>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetValue&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValue&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetValue``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValue(Of T) (bag As IBotDataBag, key As String) As T" />
      <MemberSignature Language="F#" Value="static member GetValue : Microsoft.Bot.Builder.Dialogs.IBotDataBag * string -&gt; 'T" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GetValue (bag, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="bag" Type="Microsoft.Bot.Builder.Dialogs.IBotDataBag" RefType="this" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the value to get.</typeparam>
        <param name="bag">The bot data bag.</param>
        <param name="key">The key of the value to get or set.</param>
        <summary>
            Gets the value associated with the specified key.
            </summary>
        <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <paramref name="key" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetValueOrDefault&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key, T defaultValue = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValueOrDefault&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key, !!T defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetValueOrDefault``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueOrDefault(Of T) (bag As IBotDataBag, key As String, Optional defaultValue As T = null) As T" />
      <MemberSignature Language="F#" Value="static member GetValueOrDefault : Microsoft.Bot.Builder.Dialogs.IBotDataBag * string * 'T -&gt; 'T" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GetValueOrDefault (bag, key, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="bag" Type="Microsoft.Bot.Builder.Dialogs.IBotDataBag" RefType="this" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="defaultValue" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the value to get.</typeparam>
        <param name="bag">The bot data bag.</param>
        <param name="key">The key of the value to get or set.</param>
        <param name="defaultValue">The value to return if the key is not present</param>
        <summary>
            Gets the value associated with the specified key or a default value if not found.
            </summary>
        <returns>The value associated with the specified key. If the specified key is not found, <paramref name="defaultValue" />
            is returned </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GZipSerialize">
      <MemberSignature Language="C#" Value="public static string GZipSerialize (this Microsoft.Bot.Builder.Dialogs.ResumptionCookie resumptionCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GZipSerialize(class Microsoft.Bot.Builder.Dialogs.ResumptionCookie resumptionCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GZipSerialize(Microsoft.Bot.Builder.Dialogs.ResumptionCookie)" />
      <MemberSignature Language="F#" Value="static member GZipSerialize : Microsoft.Bot.Builder.Dialogs.ResumptionCookie -&gt; string" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GZipSerialize resumptionCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use ConversationReference.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resumptionCookie" Type="Microsoft.Bot.Builder.Dialogs.ResumptionCookie" RefType="this" />
      </Parameters>
      <Docs>
        <param name="resumptionCookie"> The resumption cookie.</param>
        <summary>
            Binary serializes <see cref="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie" /> using <see cref="T:System.IO.Compression.GZipStream" />.
            </summary>
        <returns> A Base64 encoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task PostAsync (this Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser botToUser, string text, string locale = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task PostAsync(class Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser botToUser, string text, string locale, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.PostAsync(Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member PostAsync : Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.PostAsync (botToUser, text, locale, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Bot.Builder.Dialogs.Extensions/&lt;PostAsync&gt;d__10))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="botToUser" Type="Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser" RefType="this" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="locale" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="botToUser">Communication channel to use.</param>
        <param name="text">The message text.</param>
        <param name="locale">The locale of the text.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Post a message to be sent to the user, using previous messages to establish a conversation context.
            </summary>
        <returns>A task that represents the post operation.</returns>
        <remarks>
            If the locale parameter is not set, locale of the incoming message will be used for reply.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecognizeDouble">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;double&gt;&gt; RecognizeDouble (this Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, Microsoft.Bot.Connector.IMessageActivity message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.RecognizeEntity`1&lt;float64&gt;&gt; RecognizeDouble(class Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, class Microsoft.Bot.Connector.IMessageActivity message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDouble(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RecognizeDouble (recognizer As IPromptRecognizer, message As IMessageActivity) As IEnumerable(Of RecognizeEntity(Of Double))" />
      <MemberSignature Language="F#" Value="static member RecognizeDouble : Microsoft.Bot.Builder.Dialogs.IPromptRecognizer * Microsoft.Bot.Connector.IMessageActivity -&gt; seq&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;double&gt;&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDouble (recognizer, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recognizer" Type="Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" RefType="this" />
        <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
      </Parameters>
      <Docs>
        <param name="recognizer">
          <see cref="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
        </param>
        <param name="message">Message context.</param>
        <summary>Recognizer for a double number.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecognizeDoubleInRange">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;double&gt;&gt; RecognizeDoubleInRange (this Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, Microsoft.Bot.Connector.IMessageActivity message, Nullable&lt;double&gt; min, Nullable&lt;double&gt; max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.RecognizeEntity`1&lt;float64&gt;&gt; RecognizeDoubleInRange(class Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, class Microsoft.Bot.Connector.IMessageActivity message, valuetype System.Nullable`1&lt;float64&gt; min, valuetype System.Nullable`1&lt;float64&gt; max) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDoubleInRange(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity,System.Nullable{System.Double},System.Nullable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RecognizeDoubleInRange (recognizer As IPromptRecognizer, message As IMessageActivity, min As Nullable(Of Double), max As Nullable(Of Double)) As IEnumerable(Of RecognizeEntity(Of Double))" />
      <MemberSignature Language="F#" Value="static member RecognizeDoubleInRange : Microsoft.Bot.Builder.Dialogs.IPromptRecognizer * Microsoft.Bot.Connector.IMessageActivity * Nullable&lt;double&gt; * Nullable&lt;double&gt; -&gt; seq&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;double&gt;&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDoubleInRange (recognizer, message, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recognizer" Type="Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" RefType="this" />
        <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
        <Parameter Name="min" Type="System.Nullable&lt;System.Double&gt;" />
        <Parameter Name="max" Type="System.Nullable&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="recognizer">
          <see cref="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
        </param>
        <param name="message">Message context.</param>
        <param name="min">Minimun value.</param>
        <param name="max">Maximum value.</param>
        <summary>Recognizes the double in range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecognizeInteger">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;long&gt;&gt; RecognizeInteger (this Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, Microsoft.Bot.Connector.IMessageActivity message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.RecognizeEntity`1&lt;int64&gt;&gt; RecognizeInteger(class Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, class Microsoft.Bot.Connector.IMessageActivity message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeInteger(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RecognizeInteger (recognizer As IPromptRecognizer, message As IMessageActivity) As IEnumerable(Of RecognizeEntity(Of Long))" />
      <MemberSignature Language="F#" Value="static member RecognizeInteger : Microsoft.Bot.Builder.Dialogs.IPromptRecognizer * Microsoft.Bot.Connector.IMessageActivity -&gt; seq&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;int64&gt;&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeInteger (recognizer, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recognizer" Type="Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" RefType="this" />
        <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
      </Parameters>
      <Docs>
        <param name="recognizer">
          <see cref="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
        </param>
        <param name="message">Message context.</param>
        <summary>Recognizer for a Int64 number.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecognizeIntegerInRange">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;long&gt;&gt; RecognizeIntegerInRange (this Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, Microsoft.Bot.Connector.IMessageActivity message, Nullable&lt;long&gt; min, Nullable&lt;long&gt; max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.RecognizeEntity`1&lt;int64&gt;&gt; RecognizeIntegerInRange(class Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, class Microsoft.Bot.Connector.IMessageActivity message, valuetype System.Nullable`1&lt;int64&gt; min, valuetype System.Nullable`1&lt;int64&gt; max) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeIntegerInRange(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity,System.Nullable{System.Int64},System.Nullable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RecognizeIntegerInRange (recognizer As IPromptRecognizer, message As IMessageActivity, min As Nullable(Of Long), max As Nullable(Of Long)) As IEnumerable(Of RecognizeEntity(Of Long))" />
      <MemberSignature Language="F#" Value="static member RecognizeIntegerInRange : Microsoft.Bot.Builder.Dialogs.IPromptRecognizer * Microsoft.Bot.Connector.IMessageActivity * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; -&gt; seq&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;int64&gt;&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeIntegerInRange (recognizer, message, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recognizer" Type="Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" RefType="this" />
        <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
        <Parameter Name="min" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="max" Type="System.Nullable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="recognizer">
          <see cref="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
        </param>
        <param name="message">Message context.</param>
        <param name="min">Minimun value.</param>
        <param name="max">Maximum value.</param>
        <summary>Recognizer for a Int64 number within a range</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SayAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SayAsync (this Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser botToUser, string text, string speak = null, Microsoft.Bot.Builder.Dialogs.MessageOptions options = null, string locale = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SayAsync(class Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser botToUser, string text, string speak, class Microsoft.Bot.Builder.Dialogs.MessageOptions options, string locale, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.SayAsync(Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser,System.String,System.String,Microsoft.Bot.Builder.Dialogs.MessageOptions,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SayAsync : Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser * string * string * Microsoft.Bot.Builder.Dialogs.MessageOptions * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.SayAsync (botToUser, text, speak, options, locale, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Bot.Builder.Dialogs.Extensions/&lt;SayAsync&gt;d__11))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="botToUser" Type="Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser" RefType="this" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="speak" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Bot.Builder.Dialogs.MessageOptions" />
        <Parameter Name="locale" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="botToUser">Communication channel to use.</param>
        <param name="text">The message text.</param>
        <param name="speak">The SSML markup for text to speech.</param>
        <param name="options">The options for the message.</param>
        <param name="locale">The locale of the text.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Post a message and optional SSML to be sent to the user, using previous messages to establish a conversation context.
            </summary>
        <returns>A task that represents the post operation.</returns>
        <remarks>
            If the locale parameter is not set, locale of the incoming message will be used for reply.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static void Wait (this Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack, Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;Microsoft.Bot.Connector.IMessageActivity&gt; resume);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Wait(class Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack, class Microsoft.Bot.Builder.Dialogs.ResumeAfter`1&lt;class Microsoft.Bot.Connector.IMessageActivity&gt; resume) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.Wait(Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack,Microsoft.Bot.Builder.Dialogs.ResumeAfter{Microsoft.Bot.Connector.IMessageActivity})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Wait (stack As IDialogStack, resume As ResumeAfter(Of IMessageActivity))" />
      <MemberSignature Language="F#" Value="static member Wait : Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack * Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;Microsoft.Bot.Connector.IMessageActivity&gt; -&gt; unit" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.Wait (stack, resume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>3.12.2.4</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack" RefType="this" />
        <Parameter Name="resume" Type="Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;Microsoft.Bot.Connector.IMessageActivity&gt;" />
      </Parameters>
      <Docs>
        <param name="stack">The dialog stack.</param>
        <param name="resume">The method to resume when the message has been received.</param>
        <summary>
            Suspend the current dialog until the user has sent a message to the bot.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>